<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- Console appender for stdout -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- WorkflowId and ActivityId are keys populated by JavaSDK into MDC context -->
            <!-- See io.temporal.internal.logging.LoggerTag for a full list of keys -->
            <pattern>%d{HH:mm:ss.SSS} {%X{WorkflowId} %X{ActivityId}} [%thread] %-5level %logger{36} - %msg %n</pattern>        </encoder>
    </appender>

    <!-- OpenTelemetry appender -->
    <appender name="OpenTelemetry"
        class="io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender">
        <captureExperimentalAttributes>false</captureExperimentalAttributes>
        <captureCodeAttributes>true</captureCodeAttributes>
        <captureMarkerAttribute>true</captureMarkerAttribute>
        <captureKeyValuePairAttributes>true</captureKeyValuePairAttributes>
        <captureLoggerContext>true</captureLoggerContext>
        <captureMdcAttributes>*</captureMdcAttributes>
    </appender>

    <!-- Async wrapper for OpenTelemetry appender to avoid blocking -->
    <appender name="AsyncOpenTelemetry" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="OpenTelemetry"/>
        <queueSize>1024</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>true</includeCallerData>
    </appender>

    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="OpenTelemetry"/>
    </root>

    <!-- You can also set specific logger levels if needed -->
    <logger name="ch.qos.logback" level="WARN" />
    <logger name="io.temporal" level="WARN" />
    <!-- Set your application logs to INFO level -->
    <logger name="io.temporal.otel" level="INFO" />

</configuration>